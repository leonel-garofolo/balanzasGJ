/*
 * Created on 2019-10-06 ( Date ISO 2019-10-06 - Time 22:55:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.balanzasgj.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import javax.inject.Named;

import com.balanzasgj.app.model.Patentes;
import com.balanzasgj.app.persistence.PatentesPersistence;
import com.balanzasgj.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Patentes persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("PatentesPersistence")
public class PatentesPersistenceJdbc extends GenericJdbcDAO<Patentes> implements PatentesPersistence {

	private final static String SQL_SELECT_ALL = 
		"select codigo, tara, date_update from patentes"; 

	private final static String SQL_SELECT = 
		"select codigo, tara, date_update from patentes where codigo = ?";

	private final static String SQL_INSERT = 
		"insert into patentes ( codigo, tara, date_update ) values ( ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update patentes set tara = ?, date_update = ? where codigo = ?";

	private final static String SQL_DELETE = 
		"delete from patentes where codigo = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from patentes";

	private final static String SQL_COUNT = 
		"select count(*) from patentes where codigo = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public PatentesPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Patentes record, long value) {
		throw new IllegalStateException("Unexpected call to method 'setAutoIncrementedKey'");
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Patentes patentes) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, patentes.getCodigo() ) ; // "codigo" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Patentes patentes) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, patentes.getCodigo() ) ; // "codigo" : java.lang.String
		setValue(ps, i++, patentes.getTara() ) ; // "tara" : java.lang.Double
		setValue(ps, i++, patentes.getUpdate() ) ; // "update" : java.util.Date
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Patentes patentes) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, patentes.getTara() ) ; // "tara" : java.lang.Double
		setValue(ps, i++, patentes.getUpdate() ) ; // "update" : java.util.Date
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, patentes.getCodigo() ) ; // "codigo" : java.lang.String
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param codigo;
	 * @return the new instance
	 */
	private Patentes newInstanceWithPrimaryKey( String codigo ) {
		Patentes patentes = new Patentes();
		patentes.setCodigo( codigo );
		return patentes ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Patentes newInstance() {
		return new Patentes() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Patentes populateBean(ResultSet rs, Patentes patentes) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		patentes.setCodigo(rs.getString("codigo")); // java.lang.String
		patentes.setTara(rs.getDouble("tara")); // java.lang.Double
		if ( rs.wasNull() ) { patentes.setTara(null); }; // not primitive number => keep null value if any
		patentes.setUpdate(rs.getDate("date_update")); // java.util.Date
		return patentes ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Patentes findById( String codigo ) {
		Patentes patentes = newInstanceWithPrimaryKey( codigo ) ;
		if ( super.doSelect(patentes) ) {
			return patentes ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<Patentes> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param patentes
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Patentes patentes ) {
		return super.doSelect(patentes) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param patentes
	 */
	public long insert(Patentes patentes) {
		super.doInsert(patentes);
		return 0L ;
	}   

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Patentes save(Patentes patentes) {
		patentes.setUpdate(new Date());
		if ( super.doExists(patentes) ) {
			super.doUpdate(patentes);
		}
		else {
			super.doInsert(patentes);
		}
		return patentes ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( String codigo ) {
		Patentes patentes = newInstanceWithPrimaryKey( codigo ) ;
		int r = super.doDelete(patentes);
		return r > 0 ;
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param codigo;
	 * @return
	 */
	// @Override
	public boolean exists( String codigo ) {
		Patentes patentes = newInstanceWithPrimaryKey( codigo ) ;
		return super.doExists(patentes);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param patentes
	 * @return
	 */
	// @Override
	public boolean exists( Patentes patentes ) {
		return super.doExists(patentes);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

	@Override
	public Patentes findById(Long codigo) {
		return null;
	}

	@Override
	public boolean deleteById(Long codigo) {
		return false;
	}

}
