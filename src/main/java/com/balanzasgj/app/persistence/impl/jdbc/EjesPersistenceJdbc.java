/*
 * Created on 2019-10-05 ( Date ISO 2019-10-05 - Time 21:10:20 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.balanzasgj.app.persistence.impl.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

import javax.inject.Named;

import com.balanzasgj.app.model.Ejes;
import com.balanzasgj.app.persistence.EjesPersistence;
import com.balanzasgj.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Ejes persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("EjesPersistence")
public class EjesPersistenceJdbc extends GenericJdbcDAO<Ejes> implements EjesPersistence {

	private final static String SQL_SELECT_ALL = 
		"select idEjes, nroEje, peso_entrada, peso_salida, idTaras from ejes"; 
	private final static String SQL_SELECT_ALL_TARAS = 
			"select idEjes, nroEje, peso_entrada, peso_salida, idTaras from ejes where idTaras = ? ";

	private final static String SQL_SELECT = 
		"select idEjes, nroEje, peso, type, idTaras from ejes where idEjes = ?";

	private final static String SQL_INSERT = 
		"insert into ejes ( nroEje, peso_entrada, peso_salida, idTaras ) values ( ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update ejes set nroEje = ?, peso_entrada = ?, peso_salida = ?,  idTaras = ? where idEjes = ?";

	private final static String SQL_DELETE = 
		"delete from ejes where idEjes = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from ejes";

	private final static String SQL_COUNT = 
		"select count(*) from ejes where idEjes = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public EjesPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Ejes record, long value) {
		record.setIdEje(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Ejes ejes) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, ejes.getIdEje() ) ; // "idEjes" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Ejes ejes) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "idEjes" is auto-incremented => no set in insert		
		setValue(ps, i++, ejes.getNroEje() ) ; // "nroEje" : java.lang.Integer
		setValue(ps, i++, ejes.getPesoEntrada() ) ; // "peso" : java.lang.Double
		setValue(ps, i++, ejes.getPesoSalida()) ; //
		setValue(ps, i++, ejes.getIdTaras() ) ; // "idTaras" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Ejes ejes) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, ejes.getNroEje() ) ; // "nroEje" : java.lang.Integer
		setValue(ps, i++, ejes.getPesoEntrada() ) ; // "peso" : java.lang.Double
		setValue(ps, i++, ejes.getPesoSalida() ) ; //
		setValue(ps, i++, ejes.getIdTaras() ) ; // "idTaras" : java.lang.Integer
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, ejes.getIdEje() ) ; // "idEjes" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param idejes;
	 * @return the new instance
	 */
	private Ejes newInstanceWithPrimaryKey( long idejes ) {
		Ejes ejes = new Ejes();
		ejes.setIdEje( idejes );
		return ejes ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Ejes newInstance() {
		return new Ejes() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Ejes populateBean(ResultSet rs, Ejes ejes) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		ejes.setIdEje(rs.getLong("idEjes")); // java.lang.Integer
		if ( rs.wasNull() ) { ejes.setIdEje(null); }; // not primitive number => keep null value if any
		ejes.setNroEje(rs.getInt("nroEje")); // java.lang.Integer
		if ( rs.wasNull() ) { ejes.setNroEje(null); }; // not primitive number => keep null value if any
		ejes.setPesoEntrada(rs.getDouble("peso_entrada")); // java.lang.Double
		if ( rs.wasNull() ) { ejes.setPesoEntrada(null); }; // not primitive number => keep null value if any
		ejes.setPesoSalida(rs.getDouble("peso_salida")); // java.lang.String
		ejes.setIdTaras(rs.getLong("idTaras")); // java.lang.Integer
		if ( rs.wasNull() ) { ejes.setIdTaras(null); }; // not primitive number => keep null value if any
		return ejes ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Ejes findById( Long idejes ) {
		Ejes ejes = newInstanceWithPrimaryKey( idejes ) ;
		if ( super.doSelect(ejes) ) {
			return ejes ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<Ejes> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param ejes
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Ejes ejes ) {
		return super.doSelect(ejes) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param ejes
	 */
	public long insert(Ejes ejes) {
		Long key = super.doInsertAutoIncr(ejes);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Ejes save(Ejes ejes) {
		if ( super.doExists(ejes) ) {
			super.doUpdate(ejes);
		}
		else {
			super.doInsert(ejes);
		}
		return ejes ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Long idejes ) {
		Ejes ejes = newInstanceWithPrimaryKey( idejes ) ;
		int r = super.doDelete(ejes);
		return r > 0 ;
	}
   

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param idejes;
	 * @return
	 */
	// @Override
	public boolean exists( Integer idejes ) {
		Ejes ejes = newInstanceWithPrimaryKey( idejes ) ;
		return super.doExists(ejes);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param ejes
	 * @return
	 */
	// @Override
	public boolean exists( Ejes ejes ) {
		return super.doExists(ejes);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

	@Override
	public List<Ejes> findAll(Long idTara) {
		List<Ejes> list = new LinkedList<Ejes>() ;
		Connection conn = null;
 
		try {
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement( SQL_SELECT_ALL_TARAS );
			ps.setLong(1, idTara);			
			//--- Execute SQL SELECT 
			ResultSet rs = ps.executeQuery();
			while ( rs.next() ) {
				Ejes bean = newInstance(); 
				populateBean(rs, bean);
				list.add(bean);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return list ;
	}

}
