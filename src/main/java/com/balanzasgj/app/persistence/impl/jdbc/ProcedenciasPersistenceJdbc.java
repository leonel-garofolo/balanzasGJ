/*
 * Created on 2019-06-27 ( Date ISO 2019-06-27 - Time 20:59:47 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.balanzasgj.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;

import com.balanzasgj.app.model.Procedencias;
import com.balanzasgj.app.persistence.ProcedenciasPersistence;
import com.balanzasgj.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Procedencias persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("ProcedenciasPersistence")
public class ProcedenciasPersistenceJdbc extends GenericJdbcDAO<Procedencias> implements ProcedenciasPersistence {

	private final static String SQL_SELECT_ALL = 
		"select codigo, nombre from procedencias"; 

	private final static String SQL_SELECT = 
		"select codigo, nombre from procedencias where codigo = ?";

	private final static String SQL_INSERT = 
		"insert into procedencias ( nombre ) values ( ? )";

	private final static String SQL_UPDATE = 
		"update procedencias set nombre = ? where codigo = ?";

	private final static String SQL_DELETE = 
		"delete from procedencias where codigo = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from procedencias";

	private final static String SQL_COUNT = 
		"select count(*) from procedencias where codigo = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ProcedenciasPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Procedencias record, long value) {
		record.setCodigo(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Procedencias procedencias) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, procedencias.getCodigo() ) ; // "codigo" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Procedencias procedencias) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "codigo" is auto-incremented => no set in insert		
		setValue(ps, i++, procedencias.getNombre() ) ; // "nombre" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Procedencias procedencias) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, procedencias.getNombre() ) ; // "nombre" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, procedencias.getCodigo() ) ; // "codigo" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param codigo;
	 * @return the new instance
	 */
	private Procedencias newInstanceWithPrimaryKey( Long codigo ) {
		Procedencias procedencias = new Procedencias();
		procedencias.setCodigo( codigo );
		return procedencias ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Procedencias newInstance() {
		return new Procedencias() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Procedencias populateBean(ResultSet rs, Procedencias procedencias) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		procedencias.setCodigo(rs.getLong("codigo")); // java.lang.Integer
		if ( rs.wasNull() ) { procedencias.setCodigo(null); }; // not primitive number => keep null value if any
		procedencias.setNombre(rs.getString("nombre")); // java.lang.String
		return procedencias ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Procedencias findById( Long codigo ) {
		Procedencias procedencias = newInstanceWithPrimaryKey( codigo ) ;
		if ( super.doSelect(procedencias) ) {
			return procedencias ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public List<Procedencias> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param procedencias
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Procedencias procedencias ) {
		return super.doSelect(procedencias) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param procedencias
	 */
	public long insert(Procedencias procedencias) {
		Long key = super.doInsertAutoIncr(procedencias);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Procedencias create(Procedencias procedencias) {
		insert(procedencias);
		return procedencias ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean update(Procedencias procedencias) {
		int r = super.doUpdate(procedencias);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Procedencias save(Procedencias procedencias) {
		if ( super.doExists(procedencias) ) {
			super.doUpdate(procedencias);
		}
		else {
			super.doInsert(procedencias);
		}
		return procedencias ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean deleteById( Long codigo ) {
		Procedencias procedencias = newInstanceWithPrimaryKey( codigo ) ;
		int r = super.doDelete(procedencias);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean delete( Procedencias procedencias ) {
		int r = super.doDelete(procedencias);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param codigo;
	 * @return
	 */
	public boolean exists( Long codigo ) {
		Procedencias procedencias = newInstanceWithPrimaryKey( codigo ) ;
		return super.doExists(procedencias);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param procedencias
	 * @return
	 */
	public boolean exists( Procedencias procedencias ) {
		return super.doExists(procedencias);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
