/*
 * Created on 2019-07-05 ( Date ISO 2019-07-05 - Time 19:29:49 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.balanzasgj.app.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;

import com.balanzasgj.app.model.Indicadores;
import com.balanzasgj.app.persistence.IndicadoresPersistence;
import com.balanzasgj.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Indicadores persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("IndicadoresPersistence")
public class IndicadoresPersistenceJdbc extends GenericJdbcDAO<Indicadores> implements IndicadoresPersistence {

	private final static String SQL_SELECT_ALL = 
		"select idindicadores, nombre, posicion_caracter_control, longitud_caracter_control, caracter_control, posicion_inicio_dato, longitud_dato, puerto, velocidad, bits_de_datos, paridad, control_de_flujo, bits_parada from indicadores"; 

	private final static String SQL_SELECT = 
		"select idindicadores, nombre, posicion_caracter_control, longitud_caracter_control, caracter_control, posicion_inicio_dato, longitud_dato, puerto, velocidad, bits_de_datos, paridad, control_de_flujo, bits_parada from indicadores where idindicadores = ?";

	private final static String SQL_INSERT = 
		"insert into indicadores ( nombre, posicion_caracter_control, longitud_caracter_control, caracter_control, posicion_inicio_dato, longitud_dato, puerto, velocidad, bits_de_datos, paridad, control_de_flujo, bits_parada ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update indicadores set nombre = ?, posicion_caracter_control = ?, longitud_caracter_control = ?, caracter_control = ?, posicion_inicio_dato = ?, longitud_dato = ?, puerto = ?, velocidad = ?, bits_de_datos = ?, paridad = ?, control_de_flujo = ?, bits_parada = ? where idindicadores = ?";

	private final static String SQL_DELETE = 
		"delete from indicadores where idindicadores = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from indicadores";

	private final static String SQL_COUNT = 
		"select count(*) from indicadores where idindicadores = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public IndicadoresPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Indicadores record, long value) {
		record.setIdindicadores(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Indicadores indicadores) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, indicadores.getIdindicadores() ) ; // "idindicadores" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Indicadores indicadores) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "idindicadores" is auto-incremented => no set in insert		
		setValue(ps, i++, indicadores.getNombre() ) ; // "nombre" : java.lang.String
		setValue(ps, i++, indicadores.getPosicionCaracterControl() ) ; // "posicion_caracter_control" : java.lang.Integer
		setValue(ps, i++, indicadores.getLongitudCaracterControl() ) ; // "longitud_caracter_control" : java.lang.Integer
		setValue(ps, i++, indicadores.getCaracterControl() ) ; // "caracter_control" : java.lang.String
		setValue(ps, i++, indicadores.getPosicionInicioDato() ) ; // "posicion_inicio_dato" : java.lang.Integer
		setValue(ps, i++, indicadores.getLongitudDato() ) ; // "longitud_dato" : java.lang.Integer
		setValue(ps, i++, indicadores.getPuerto() ) ; // "puerto" : java.lang.Integer
		setValue(ps, i++, indicadores.getVelocidad() ) ; // "velocidad" : java.lang.Integer
		setValue(ps, i++, indicadores.getBitsDeDatos() ) ; // "bits_de_datos" : java.lang.Integer
		setValue(ps, i++, indicadores.getParidad() ) ; // "paridad" : java.lang.String
		setValue(ps, i++, indicadores.getControlDeFlujo() ) ; // "control_de_flujo" : java.lang.String
		setValue(ps, i++, indicadores.getBitsDeParada() ) ; // "control_de_flujo" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Indicadores indicadores) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, indicadores.getNombre() ) ; // "nombre" : java.lang.String
		setValue(ps, i++, indicadores.getPosicionCaracterControl() ) ; // "posicion_caracter_control" : java.lang.Integer
		setValue(ps, i++, indicadores.getLongitudCaracterControl() ) ; // "longitud_caracter_control" : java.lang.Integer
		setValue(ps, i++, indicadores.getCaracterControl() ) ; // "caracter_control" : java.lang.String
		setValue(ps, i++, indicadores.getPosicionInicioDato() ) ; // "posicion_inicio_dato" : java.lang.Integer
		setValue(ps, i++, indicadores.getLongitudDato() ) ; // "longitud_dato" : java.lang.Integer
		setValue(ps, i++, indicadores.getPuerto() ) ; // "puerto" : java.lang.Integer
		setValue(ps, i++, indicadores.getVelocidad() ) ; // "velocidad" : java.lang.Integer
		setValue(ps, i++, indicadores.getBitsDeDatos() ) ; // "bits_de_datos" : java.lang.Integer
		setValue(ps, i++, indicadores.getParidad() ) ; // "paridad" : java.lang.String
		setValue(ps, i++, indicadores.getControlDeFlujo() ) ; // "control_de_flujo" : java.lang.String
		setValue(ps, i++, indicadores.getBitsDeParada() ) ; // "control_de_flujo" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, indicadores.getIdindicadores() ) ; // "idindicadores" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param idindicadores;
	 * @return the new instance
	 */
	private Indicadores newInstanceWithPrimaryKey( Long idindicadores ) {
		Indicadores indicadores = new Indicadores();
		indicadores.setIdindicadores( idindicadores );
		return indicadores ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Indicadores newInstance() {
		return new Indicadores() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Indicadores populateBean(ResultSet rs, Indicadores indicadores) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		indicadores.setIdindicadores(rs.getLong("idindicadores")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setIdindicadores(null); }; // not primitive number => keep null value if any
		indicadores.setNombre(rs.getString("nombre")); // java.lang.String
		indicadores.setPosicionCaracterControl(rs.getInt("posicion_caracter_control")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setPosicionCaracterControl(null); }; // not primitive number => keep null value if any
		indicadores.setLongitudCaracterControl(rs.getInt("longitud_caracter_control")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setLongitudCaracterControl(null); }; // not primitive number => keep null value if any
		indicadores.setCaracterControl(rs.getString("caracter_control")); // java.lang.String
		indicadores.setPosicionInicioDato(rs.getInt("posicion_inicio_dato")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setPosicionInicioDato(null); }; // not primitive number => keep null value if any
		indicadores.setLongitudDato(rs.getInt("longitud_dato")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setLongitudDato(null); }; // not primitive number => keep null value if any
		indicadores.setPuerto(rs.getInt("puerto")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setPuerto(null); }; // not primitive number => keep null value if any
		indicadores.setVelocidad(rs.getInt("velocidad")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setVelocidad(null); }; // not primitive number => keep null value if any
		indicadores.setBitsDeDatos(rs.getInt("bits_de_datos")); // java.lang.Integer
		if ( rs.wasNull() ) { indicadores.setBitsDeDatos(null); }; // not primitive number => keep null value if any
		indicadores.setParidad(rs.getString("paridad")); // java.lang.String
		indicadores.setControlDeFlujo(rs.getString("control_de_flujo")); // java.lang.String
		indicadores.setBitsDeParada(rs.getString("bits_parada")); // java.lang.String
		return indicadores ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Indicadores findById( Long idindicadores ) {
		Indicadores indicadores = newInstanceWithPrimaryKey( idindicadores ) ;
		if ( super.doSelect(indicadores) ) {
			return indicadores ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<Indicadores> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param indicadores
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Indicadores indicadores ) {
		return super.doSelect(indicadores) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param indicadores
	 */
	public long insert(Indicadores indicadores) {
		Long key = super.doInsertAutoIncr(indicadores);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public Indicadores create(Indicadores indicadores) {
		insert(indicadores);
		return indicadores ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean update(Indicadores indicadores) {
		int r = super.doUpdate(indicadores);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Indicadores save(Indicadores indicadores) {
		if ( super.doExists(indicadores) ) {
			super.doUpdate(indicadores);
		}
		else {
			super.doInsert(indicadores);
		}
		return indicadores ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Long idindicadores ) {
		Indicadores indicadores = newInstanceWithPrimaryKey( idindicadores ) ;
		int r = super.doDelete(indicadores);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean delete( Indicadores indicadores ) {
		int r = super.doDelete(indicadores);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param idindicadores;
	 * @return
	 */
	// @Override
	public boolean exists( Long idindicadores ) {
		Indicadores indicadores = newInstanceWithPrimaryKey( idindicadores ) ;
		return super.doExists(indicadores);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param indicadores
	 * @return
	 */
	// @Override
	public boolean exists( Indicadores indicadores ) {
		return super.doExists(indicadores);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
