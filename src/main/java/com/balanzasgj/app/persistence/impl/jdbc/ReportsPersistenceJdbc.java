/*
 * Created on 2020-09-13 ( Date ISO 2020-09-13 - Time 21:05:37 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package com.balanzasgj.app.persistence.impl.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;
import com.balanzasgj.app.model.Reports;
import com.balanzasgj.app.persistence.ReportsPersistence;
import com.balanzasgj.app.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Reports persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("ReportsPersistence")
public class ReportsPersistenceJdbc extends GenericJdbcDAO<Reports> implements ReportsPersistence {

	private final static String SQL_SELECT_ALL = 
		"select id, tara_id, count from reports"; 

	private final static String SQL_SELECT = 
		"select id, tara_id, count from reports where id = ?";

	private final static String SQL_INSERT = 
		"insert into reports ( tara_id, count ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"update reports set tara_id = ?, count = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from reports where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from reports";

	private final static String SQL_COUNT = 
		"select count(*) from reports where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ReportsPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(Reports record, long value) {
		record.setId(value);
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, Reports reports) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, reports.getId() ) ; // "id" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, Reports reports) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "id" is auto-incremented => no set in insert		
		setValue(ps, i++, reports.getTaraId() ) ; // "tara_id" : java.lang.Integer
		setValue(ps, i++, reports.getCount() ) ; // "count" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, Reports reports) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, reports.getTaraId() ) ; // "tara_id" : java.lang.Integer
		setValue(ps, i++, reports.getCount() ) ; // "count" : java.lang.Integer
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, reports.getId() ) ; // "id" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private Reports newInstanceWithPrimaryKey( long id ) {
		Reports reports = new Reports();
		reports.setId( id );
		return reports ;
	}

	//----------------------------------------------------------------------
	@Override
	protected Reports newInstance() {
		return new Reports() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected Reports populateBean(ResultSet rs, Reports reports) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		reports.setId(rs.getLong("id")); // java.lang.Integer
		if ( rs.wasNull() ) { reports.setId(null); }; // not primitive number => keep null value if any
		reports.setTaraId(rs.getLong("tara_id")); // java.lang.Integer
		if ( rs.wasNull() ) { reports.setTaraId(null); }; // not primitive number => keep null value if any
		reports.setCount(rs.getInt("count")); // java.lang.Integer
		if ( rs.wasNull() ) { reports.setCount(null); }; // not primitive number => keep null value if any
		return reports ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Reports findById( Long id ) {
		Reports reports = newInstanceWithPrimaryKey( id ) ;
		if ( super.doSelect(reports) ) {
			return reports ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<Reports> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param reports
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( Reports reports ) {
		return super.doSelect(reports) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param reports
	 */
	public long insert(Reports reports) {
		Long key = super.doInsertAutoIncr(reports);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	private boolean update(Reports reports) {
		int r = super.doUpdate(reports);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public Reports save(Reports reports) {
		if ( super.doExists(reports) ) {
			super.doUpdate(reports);
		}
		else {
			super.doInsert(reports);
		}
		return reports ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Long id ) {
		Reports reports = newInstanceWithPrimaryKey( id ) ;
		int r = super.doDelete(reports);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	// @Override
	public boolean exists( long id ) {
		Reports reports = newInstanceWithPrimaryKey( id ) ;
		return super.doExists(reports);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param reports
	 * @return
	 */
	// @Override
	public boolean exists( Reports reports ) {
		return super.doExists(reports);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	@Override
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

	@Override
	public Reports fintByTaraId(Long taraId) {
		Reports report = null;
		Connection conn = null;		
		try {
			
			conn = getConnection();
			PreparedStatement ps = conn.prepareStatement("select * from reports where tara_id = ?");
			ps.setLong(1, taraId);
			//--- Execute SQL SELECT
			ResultSet rs = ps.executeQuery();
			while ( rs.next() ) {
				report = new Reports();
				populateBean(rs, report);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			closeConnection(conn);
		}
		return report;
	}

}
